pipeline {
    agent any
    tools {
        jdk 'jdk21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
    }
    environment {
        DOCKER_PASSWORD = credentials("docker_password")
        GITHUB_TOKEN = credentials("github_token")
        DOCKER_PASSWORD_USR = "ByteForceCTI"
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }
        stage('Tag image') {
            steps {
                script {
                    def GIT_TAG = sh([script: 'git fetch --tags && git tag --sort=-v:refname | head -n1', returnStdout: true]).trim()
                    def MAJOR_VERSION = sh([script: 'git tag --sort=-v:refname | head -n1 | cut -d . -f 1', returnStdout: true]).trim()
                    def MINOR_VERSION = sh([script: 'git tag --sort=-v:refname | head -n1 | cut -d . -f 2', returnStdout: true]).trim()
                    def PATCH_VERSION = sh([script: 'git tag --sort=-v:refname | head -n1 | cut -d . -f 3', returnStdout: true]).trim()
                    

                    def newMinorVersion = sh(script: "echo \$(( ${MINOR_VERSION} + 1 ))", returnStdout: true).trim()
                    def newTag = "${MAJOR_VERSION}.${newMinorVersion}.${PATCH_VERSION}"
                    echo "New tag: ${newTag}"
                    
                    sh "docker build -t makebuild/hello-img:${newTag} ."
                    
                    withCredentials([usernamePassword(credentialsId: 'docker_password', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}"
                    }
                    
                    sh "docker push makebuild/hello-img:${newTag}"

                    sh "git tag ${env.IMAGE_TAG}"
                    sh "git push https://$GITHUB_TOKEN@github.com/${DOCKER_PASSWORD_USR}/lab-prod-eng.git ${env.IMAGE_TAG}"  
                    
                    //sh "docker build -t makebuild/hello-img:${MAJOR_VERSION}.\$((${MINOR_VERSION} + 1)).${PATCH_VERSION} ."
                }
            }
        }
        stage('Run image') {
            steps {
                script {
                    sh "IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo"
                }
            }
        }
    }
}